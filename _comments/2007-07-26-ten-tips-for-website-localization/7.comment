post_id: /2007/07/26/ten-tips-for-website-localization
name: utf-8 guy
date: '2008-02-06 06:25:10 -0800'
comment: "Some global tips.\r\n\r\n1. UTF8 is it, there are few reasons to use any
  other encoding. If you don't know what these reasons are -- use UTF8.\r\n\r\n2.
  PHP sucks, it's a web scripting language whose native functions lack support for
  multibyte strings. See point 1 and the multibyte tip above. If possible use a
  language where strlen returns the length of the string instead of the byte count.
  If you must use PHP, familiarize yourself with the multibyte or iconv functions.\r\n\r\n3.
  Consider pre-processing localization strings unless an app requires allowing users
  to switch language at runtime. \r\n\r\n4. If you serve UTF8 and store data as
  UTF8 -- make sure user submitted data is UTF-8 encoded. \r\n\r\n $valid_utf8 =
  iconv('UTF-8', 'UTF-8', $user_data);"
