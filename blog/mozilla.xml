<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://micropipes.com/feed/by_tag/Mozilla.xml" rel="self" type="application/atom+xml" /><link href="https://micropipes.com/" rel="alternate" type="text/html" /><updated>2024-10-28T12:14:58-07:00</updated><id>https://micropipes.com/feed/by_tag/Mozilla.xml</id><title type="html">all night diner</title><author><name>Wil Clouser</name><email>clouserw@micropipes.com</email></author><entry><title type="html">Mozilla Accounts password hashing upgrades</title><link href="https://micropipes.com/2024/10/28/mozilla-accounts-password-hashing-upgrades/" rel="alternate" type="text/html" title="Mozilla Accounts password hashing upgrades" /><published>2024-10-28T00:00:00-07:00</published><updated>2024-10-28T00:00:00-07:00</updated><id>https://micropipes.com/2024/10/28/mozilla-accounts-password-hashing-upgrades</id><content type="html" xml:base="https://micropipes.com/2024/10/28/mozilla-accounts-password-hashing-upgrades/"><![CDATA[<p>We’ve recently finished two significant changes to how Mozilla Accounts handles
password hashes which will improve security and increase flexibility around
changing emails.  The changes are entirely transparent to end-users and are
applied automatically when someone logs in.</p>

<h2 id="randomizing-salts">Randomizing Salts</h2>

<p>If a system is going to store passwords, best practice is to hash the password
with a unique salt per row.  When accounts was first built we used an account’s
email address as the unique salt for password hashing.  This saved a column in
the database and some bandwidth but overall I think was a poor idea.  It meant
<a href="https://github.com/mozilla/fxa/issues/14178">people couldn’t re-use their email
addresses</a> and it leaves <abbr title="Personally Identifiable Information">PII</abbr> sitting around
unnecessarily.</p>

<p>Instead, a better idea is just to generate a random salt.  We’ve now
transitioned Mozilla Accounts to random salts.</p>

<h2 id="increasing-key-stretching-iterations">Increasing Key Stretching Iterations</h2>

<p>Eight years ago <a href="https://www.rfk.id.au/">Ryan Kelly</a> filed <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1320222">bug
1320222</a> to review
Mozilla Accounts’ client-side key stretching capabilities and sparked a
spirited conversation about iterations and the priority of the bug.  Overall,
this is routine maintenance - we expect any amount of stretching we do will
have to be revisited periodically due to hardware improving and the value we
choose is a compromise between security and time to login, particularly on
older hardware.</p>

<p>Since we were generating new hashes for the random salts already we took the
opportunity to increase our PBKDF2 iterations from 1000 to 650000 – a number
we’re seeing others in the industry using.  This means logging in with slower
hardware (like older mobile phones) may be noticeably slower.  Below is an
excerpt from the analysis we did showing a Macbook from 2007 will take an
additional ~3 seconds to log in:</p>

<table>
  <thead>
    <tr>
      <th>Key Stretch Iterations</th>
      <th>Overhead on 2007 Macbook</th>
      <th>Overhead on 2021 MacBook Pro M1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>100,000</td>
      <td>0.4800024 seconds</td>
      <td>0.00000681 seconds</td>
    </tr>
    <tr>
      <td>200,000</td>
      <td>0.9581234 seconds</td>
      <td>0.00000169 seconds</td>
    </tr>
    <tr>
      <td>300,000</td>
      <td>1.4539928 seconds</td>
      <td>0.00000277 seconds</td>
    </tr>
    <tr>
      <td>400,000</td>
      <td>1.9337903 seconds</td>
      <td>0.00029750 seconds</td>
    </tr>
    <tr>
      <td>500,000</td>
      <td>2.4146366 seconds</td>
      <td>0.00079127 seconds</td>
    </tr>
    <tr>
      <td>600,000</td>
      <td>2.9482827 seconds</td>
      <td>0.00112186 seconds</td>
    </tr>
    <tr>
      <td>700,000</td>
      <td>3.3960513 seconds</td>
      <td>0.00117956 seconds</td>
    </tr>
    <tr>
      <td>800,000</td>
      <td>3.8675677 seconds</td>
      <td>0.00117956 seconds</td>
    </tr>
    <tr>
      <td>900,000</td>
      <td>4.3614942 seconds</td>
      <td>0.00141616 seconds</td>
    </tr>
  </tbody>
</table>

<h2 id="implementation">Implementation</h2>

<p><a href="https://github.com/dschom">Dan Schomburg</a> did the heavy lifting to make this a
smooth and successful project.  He built the v2 system alongside v1 so both
hashes are generated simultaneously and if the v2 exists the login system will
use that.  This lets us roll the feature out slowly and gives us control if we
need to disable it or roll back.</p>

<p>We tested the code for several months on our staging server before rolling it
out in production.  When we did enable it in production it was over the course
of several weeks via small percentages while we watched for unintended
side-effects and bug reports.</p>

<p>I’m pleased to say everything appers to be working smoothly.  As always, if you
notice any issues please <a href="https://github.com/mozilla/fxa/issues">let us know</a>.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><category term="software" /><summary type="html"><![CDATA[We’ve recently finished two significant changes to how Mozilla Accounts handles password hashes which will improve security and increase flexibility around changing emails. The changes are entirely transparent to end-users and are applied automatically when someone logs in.]]></summary></entry><entry><title type="html">PyFxA 0.7.9 Released</title><link href="https://micropipes.com/2024/09/30/pyfxa-0.7.9-released/" rel="alternate" type="text/html" title="PyFxA 0.7.9 Released" /><published>2024-09-30T00:00:00-07:00</published><updated>2024-09-30T00:00:00-07:00</updated><id>https://micropipes.com/2024/09/30/pyfxa-0.7.9-released</id><content type="html" xml:base="https://micropipes.com/2024/09/30/pyfxa-0.7.9-released/"><![CDATA[<p>We released <a href="https://github.com/mozilla/PyFxA/releases/tag/0.7.9">PyFxA 0.7.9</a> last week (<a href="https://pypi.org/project/pyfxa/">pypi</a>).  This added:</p>

<ul>
  <li>Support for key stretching v2.  See the end of <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1320222">bug
1320222</a> for some
details.  V1 will continue to work, but we’ll remove support for it at some
point in the future.</li>
  <li>Upgraded to support (and test!) Python 3</li>
</ul>

<p>Special thanks to <a href="https://rob.cogit8.org/">Rob Hudson</a> and <a href="https://github.com/dschom">Dan Schomburg</a> for thier efforts.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><category term="software" /><summary type="html"><![CDATA[We released PyFxA 0.7.9 last week (pypi). This added:]]></summary></entry><entry><title type="html">Retiring BrowserID on Mozilla Accounts</title><link href="https://micropipes.com/2024/05/19/retiring-browserid-on-mozilla-accounts/" rel="alternate" type="text/html" title="Retiring BrowserID on Mozilla Accounts" /><published>2024-05-19T00:00:00-07:00</published><updated>2024-05-19T00:00:00-07:00</updated><id>https://micropipes.com/2024/05/19/retiring-browserid-on-mozilla-accounts</id><content type="html" xml:base="https://micropipes.com/2024/05/19/retiring-browserid-on-mozilla-accounts/"><![CDATA[<p>The <abbr title="too long; didn't read">tl;dr</abbr> here is that Mozilla
Accounts is turning off SyncStorage BrowserID support and it probably doesn’t
affect you at all.</p>

<h2 id="a-little-history">A little history</h2>

<p>In 2011, when Mozilla Accounts (called “Firefox Accounts” back then) was first
built it used BrowserID identity certificates in its authentication model.  The
BrowserID protocol never took off and Mozilla’s work on it ended in 2016.
However, the sync service in Firefox continued to use BrowserID even as OAuth
support was added to Mozilla Accounts as an alternative for all other relying
parties.</p>

<p>Over time, we recognized BrowserID was becoming a maintenance liability.  As a
non-standard protocol it created significant complexity in our codebase.
Therefore, we decided to migrate the Firefox clients off of it in favor of
OAuth.</p>

<p>This was an enormous effort, and while much more could be written about this
transition, the main takeaway is that Firefox Sync’s BrowserID support ended
with Firefox 78, which shipped in June 2020 and reached its end of life in
November 2021.</p>

<h2 id="present-day">Present day</h2>

<p>We’ve been waiting a long time for the usage of Firefox 78 to drop.</p>

<p>Aside from being an <abbr title="Extended Support Release">ESR</abbr> version
there are a couple of other reasons for its extra longevity:</p>

<ul>
  <li>It was the last version of the browser to support Flash</li>
  <li>It was the last version of the browser to support OS X versions &lt; 10.12</li>
</ul>

<p>With Flash now largely obsolete on the web and traffic from older operating
systems becoming rarer, we’ve decided that now is the appropriate time to turn
off support for this legacy protocol.</p>

<p>To avoid surprises and not leave anyone behind, we attempted to email anyone
still using that endpoint earlier this year. We didn’t receive any feedback and
we continued with the plan.</p>

<h2 id="our-method">Our method</h2>

<p>Our plan is simple:  BrowserID requests are the only traffic hitting our
<code class="language-plaintext highlighter-rouge">/v1/certificate/sign</code> endpoint.  We’ll begin returning <code class="language-plaintext highlighter-rouge">HTTP 404</code> replies to a
small percentage of traffic from that endpoint and monitor for any issues.
Our testing showed no concerns but it’s challenging to be comprehensive with so
many combinations of browser versions and operating systems.  Over the next few
weeks we’ll continue to ramp up the percentage of 404s until we can remove the
endpoint completely and let the traffic bounce off the front-end like any other
404.</p>

<h2 id="current-status">Current status</h2>

<p>Surprise!  I’m a few weeks late with this post.  We started returning 404s on
May 1 and are currently up to ~66% of traffic on that endpoint.  So far there
haven’t been any unexpected complications.  We’ll continue to increase over the
next few weeks and aim to have all the code removed this summer.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><category term="software" /><summary type="html"><![CDATA[The tl;dr here is that Mozilla Accounts is turning off SyncStorage BrowserID support and it probably doesn’t affect you at all.]]></summary></entry><entry><title type="html">I made a new hack poster</title><link href="https://micropipes.com/2024/05/03/I-made-a-new-hack-poster/" rel="alternate" type="text/html" title="I made a new hack poster" /><published>2024-05-03T00:00:00-07:00</published><updated>2024-05-03T00:00:00-07:00</updated><id>https://micropipes.com/2024/05/03/I-made-a-new-hack-poster</id><content type="html" xml:base="https://micropipes.com/2024/05/03/I-made-a-new-hack-poster/"><![CDATA[<p>I was feeling nostalgic a couple months ago and built a hack poster out of
plywood.  It’s mostly modeled after the original but I added the radio tower
and changed the words.  “This technology could fall into the right hands” still
makes me smile when I see it out in the world.</p>

<p><img src="/assets/img/2024-art-hack-poster-1.jpg" alt="Poster hanging on the wall" />
<img src="/assets/img/2024-art-hack-poster-2.jpg" alt="Close-up of radio tower" />
<img src="/assets/img/2024-art-hack-poster-3.jpg" alt="Close-up of lettering" /></p>]]></content><author><name>Wil Clouser</name></author><category term="art" /><category term="laser" /><category term="Mozilla" /><summary type="html"><![CDATA[I was feeling nostalgic a couple months ago and built a hack poster out of plywood. It’s mostly modeled after the original but I added the radio tower and changed the words. “This technology could fall into the right hands” still makes me smile when I see it out in the world.]]></summary></entry><entry><title type="html">Retiring the Hera library</title><link href="https://micropipes.com/2023/04/06/retiring-hera/" rel="alternate" type="text/html" title="Retiring the Hera library" /><published>2023-04-06T00:00:00-07:00</published><updated>2023-04-06T00:00:00-07:00</updated><id>https://micropipes.com/2023/04/06/retiring-hera</id><content type="html" xml:base="https://micropipes.com/2023/04/06/retiring-hera/"><![CDATA[<p>Thirteen years ago I wrote <a href="/2010/03/23/libraries-to-connect-to-a-citrix-netscaler-or-zeus-traffic-manager/">a library called Hera</a> to make expiring content on Zeus Traffic Managers easier.  It was on PyPi
but never super popular and the maintainers of <a href="https://github.com/argoproj-labs/hera">Hera
Workflow</a> got in touch with
me about taking over the namespace.  I don’t use the library anymore so it was
easy to give up the name.  If you do need the library you can find it <a href="https://github.com/clouserw/hera">on
GitHub</a>.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><category term="software" /><summary type="html"><![CDATA[Thirteen years ago I wrote a library called Hera to make expiring content on Zeus Traffic Managers easier. It was on PyPi but never super popular and the maintainers of Hera Workflow got in touch with me about taking over the namespace. I don’t use the library anymore so it was easy to give up the name. If you do need the library you can find it on GitHub.]]></summary></entry><entry><title type="html">Trying Mozilla’s Things Gateway</title><link href="https://micropipes.com/2018/02/21/trying-mozillas-things-gateway/" rel="alternate" type="text/html" title="Trying Mozilla’s Things Gateway" /><published>2018-02-21T00:00:00-08:00</published><updated>2018-02-21T00:00:00-08:00</updated><id>https://micropipes.com/2018/02/21/trying-mozillas-things-gateway</id><content type="html" xml:base="https://micropipes.com/2018/02/21/trying-mozillas-things-gateway/"><![CDATA[<p><em>Spoiler: It doesn’t yet support my hardware and I didn’t get it working, but
I’m posting anyway because it’s ok to fail. :)</em></p>

<p>Last weekend I was inspired by <a href="http://www.twobraids.com/2018/02/lars-and-real-internet-of-things-part-1.html">Lars’s posts on IoT</a> to try <a href="https://iot.mozilla.org/gateway/">Mozilla’s Things
Gateway</a>.</p>

<p>I have an old Raspberry Pi 1 Model B with a <a href="https://razberry.z-wave.me/">RaZberry Z-Wave Daughterboard</a>
which I had soldered a larger external antenna on to last year.  I used to run
OpenHAB on it to control some z-wave devices before I moved last year and since
then it’s just been in a box.  Let’s fire it up!</p>

<p>This original Raspberry Pi is a single core 700mhz CPU, so I’m planning on
running it headless and doing everything remotely over SSH to save on GUI
resources.</p>

<p><img style="border:1px solid #aaa;" src="/assets/img/2018.raspberry.pi.1.jpg" /></p>

<p>Firstly, since I hadn’t plugged this in forever, I booted it up, uninstalled
OpenHAB and the RaZberry software and <a href="https://www.raspberrypi.org/blog/raspbian-stretch/">upgraded Raspbian to the latest
version</a>.  It’s still as
easy as it should be, just edit the sources.list and:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># apt-get update</span>
<span class="c"># apt-get dist-upgrade</span>
</code></pre></div></div>

<p>I left the upgrade running over night because it was taking so long – a
foreshadowing of things to come! 😩</p>

<p>On the suggestion of the page I linked to above, I removed <code class="language-plaintext highlighter-rouge">pulseaudio</code> since I
don’t use it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># sudo apt-get purge "pulseaudio*"</span>
</code></pre></div></div>

<p><a href="https://github.com/mozilla-iot/gateway/blob/master/README.md">The instructions for installing the Gateway</a> are great and easy to follow.</p>

<p>I installed <code class="language-plaintext highlighter-rouge">nvm</code> as recommended, although so far I’m regretting it.  It takes
12 seconds to start a new login shell now while nvm executes the stuff it put
in <code class="language-plaintext highlighter-rouge">.bashrc</code>.  If I end up logging in very often I’ll get rid of it.</p>

<p>On the other hand, the Node world does do permissions well.  Most tools can
install in a users home directory without any root permissions, which I was
happy to do:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
<span class="nv">$ </span>nvm <span class="nb">install</span> <span class="nt">--lts</span>
<span class="nv">$ </span>nvm use <span class="nt">--lts</span>
<span class="nv">$ </span>npm <span class="nt">--version</span>
5.6.0
<span class="nv">$ </span>node <span class="nt">--version</span>
v8.9.4
<span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">--global</span> yarn
</code></pre></div></div>

<p>Next up was OpenZWave.  Their documentation mentions supporting the Razberry
card, so I felt good about things working.  When you get to the <code class="language-plaintext highlighter-rouge">make</code> command,
go grab some lunch – this also took plenty of time.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/OpenZWave/open-zwave.git
<span class="nv">$ </span><span class="nb">cd </span>open-zwave
<span class="nv">$ </span>make <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>make <span class="nb">install</span>
<span class="nv">$ </span><span class="nb">sudo </span>ldconfig
</code></pre></div></div>

<p>Finally, I’m ready to install the Things Gateway.  For a project that is still
new and moving quickly I like to install directly out of Git which makes
testing patches and upgrading to new versions easy (I hope!).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/mozilla-iot/gateway.git
<span class="nv">$ </span><span class="nb">cd </span>gateway
<span class="nv">$ </span>yarn  <span class="c"># Yarn actually prints how long it takes to execute.  This took 6070.32 seconds! 💤</span>
</code></pre></div></div>

<p>I don’t want to use Mozilla’s tunneling service, so I faked some SSL:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> ssl
<span class="nv">$ </span>openssl genrsa <span class="nt">-out</span> ssl/privatekey.pem 2048
<span class="nv">$ </span>openssl req <span class="nt">-new</span> <span class="nt">-sha256</span> <span class="nt">-key</span> ssl/privatekey.pem <span class="nt">-out</span> ssl/csr.pem
<span class="nv">$ </span>openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> ssl/csr.pem <span class="nt">-signkey</span> ssl/privatekey.pem <span class="nt">-out</span> ssl/certificate.pem
</code></pre></div></div>

<p>And then start the web server.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm start  <span class="c"># This takes around 4 minutes to finish starting :(</span>
</code></pre></div></div>

<p>Loading the site in my browser works!   I click <code class="language-plaintext highlighter-rouge">settings</code> -&gt; <code class="language-plaintext highlighter-rouge">add-ons</code> and
install <code class="language-plaintext highlighter-rouge">z-wave device support</code>.  However, watching the console I can see it
fail to find the z-wave interface.</p>

<p>I dug around in the code and <a href="https://github.com/mozilla-iot/zwave-adapter/blob/master/zwave-adapter.js#L368">found the findZWavePort() code</a> that does the
detection, and confrimed that it’s looking at USB ports which won’t work for
the Razberry which comes in on <code class="language-plaintext highlighter-rouge">/dev/ttyAMA0</code>.</p>

<div class="aside">
<p>I'm just going to stick in a little aside here...</p>

<p>I modified the <code>zwave-adapter.js</code> file to add some logging and
make sure that was as far as it was getting and restarted the server (which,
took 4 minutes...) and then saw the module failed to load because the checksum
didn't match.  I deleted the checksum file (4 minutes...), and it failed again,
so I finally just removed the one line from the checksum file.</p>

<p>The checksum is a great idea and I assume there is some kind of flag I can pass
to the server to ignore it, but I haven't found it yet.</p>
</div>

<p>One last thing I wanted to verify before I dug too far into the Gateway was to
make sure OpenZWave was working.  They include a program with their code called
<code class="language-plaintext highlighter-rouge">MinOZW</code>.  I didn’t see documentation for it, but it takes the port to monitor
as it’s first parameter:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>MinOZW /dev/ttyAMA0
</code></pre></div></div>

<p>That command gave me a flood of Z-wave data, so I knew it was seeing the
controller properly.</p>

<p>Searching the open Mozilla IOT issues revealed that the request to <a href="https://github.com/mozilla-iot/zwave-adapter/issues/8">support the Razberry
board was filed a couple weeks ago</a>.  So, I CC’d myself to keep an eye on
it, and that’s as far as I got.  So far:</p>

<ul>
  <li>I have really high hopes for the Mozilla IoT Gateway</li>
  <li>A first generation Raspberry Pi might be too slow for these shenanigans 😞</li>
</ul>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><summary type="html"><![CDATA[Spoiler: It doesn’t yet support my hardware and I didn’t get it working, but I’m posting anyway because it’s ok to fail. :)]]></summary></entry><entry><title type="html">Some GMail filters to make sorting through Mozilla email easier</title><link href="https://micropipes.com/2017/07/07/some-gmail-filters-to-make-sorting-through-mozilla-mail-easier/" rel="alternate" type="text/html" title="Some GMail filters to make sorting through Mozilla email easier" /><published>2017-07-07T00:00:00-07:00</published><updated>2017-07-07T00:00:00-07:00</updated><id>https://micropipes.com/2017/07/07/some-gmail-filters-to-make-sorting-through-mozilla-mail-easier</id><content type="html" xml:base="https://micropipes.com/2017/07/07/some-gmail-filters-to-make-sorting-through-mozilla-mail-easier/"><![CDATA[<p>I use some GMail filters to help sort out the flood of emails I get from Mozilla
projects.  They help me identify bugs and issues I’ve been asked for
information on versus the mail I get from, for example, being an owner for our
GitHub organization.</p>

<p>I thought I blogged about this before but I couldn’t find the post, and maybe
Google’s new Inbox will make this irrelevant, but in the mean time:</p>

<p>I have some labels set up in Gmail:</p>

<p><img src="/assets/img/2017-email-list.png" title="Some labels in GMail" /></p>

<p>And some filters:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(bugzilla-daemon@mozilla.org) to:(wclouser@mozilla.com) ("X-Bugzilla-Reason: Reporter" OR "X-Bugzilla-Reason: CC")
Do this: Apply label "bug/cc"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(bugzilla-daemon@mozilla.org) to:(wclouser@mozilla.com) "X-Bugzilla-Severity: blocker"
Do this: Apply label "bug/blocker"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(bugzilla-daemon@mozilla.org) to:(wclouser@mozilla.com) "X-Bugzilla-Assigned-To: wclouser@mozilla.com"
Do this: Apply label "bug/mine"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(bugzilla-daemon@mozilla.org) to:(wclouser@mozilla.com) "needinfo?wclouser"
Do this: Apply label "bug/mine"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(notifications@github.com)
Do this: Skip Inbox, Apply label "github"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(notifications@github.com) "You are receiving this because you are on a team that was mentioned."
Do this: Skip Inbox, Apply label "github/mine"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matches: from:(notifications@github.com) to:(wclouser@mozilla.com) "You are receiving this because you were mentioned."
Do this: Apply label "github/mine"
</code></pre></div></div>

<p>Then I just keep an eye on the labels where things are assigned to me and I can
mostly stay up with requests.  This system isn’t perfect – how do you handle
the mail? :)</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><summary type="html"><![CDATA[I use some GMail filters to help sort out the flood of emails I get from Mozilla projects. They help me identify bugs and issues I’ve been asked for information on versus the mail I get from, for example, being an owner for our GitHub organization.]]></summary></entry><entry><title type="html">Test Pilot Legacy Program Final Review</title><link href="https://micropipes.com/2016/10/27/test-pilot-legacy-program-review/" rel="alternate" type="text/html" title="Test Pilot Legacy Program Final Review" /><published>2016-10-27T02:55:00-07:00</published><updated>2016-10-27T02:55:00-07:00</updated><id>https://micropipes.com/2016/10/27/test-pilot-legacy-program-review</id><content type="html" xml:base="https://micropipes.com/2016/10/27/test-pilot-legacy-program-review/"><![CDATA[<p>One of my Q3 goals was to migrate the Legacy Test Pilot users into our new
Test Pilot program (<a href="http://micropipes.com/blog/2016/01/27/meet-the-new-test-pilot/">some background on the two programs</a>).  The previous
program was similar in that people could give feedback on experiments, but
different enough that we didn’t feel comfortable simply moving the users to the
new program without some kind of notification and opting-in.</p>

<p>We decided the best way to do that was simply push out a new version of the
legacy add-on which opened a new tab to the Test Pilot website and then
uninstalled itself.  This lets people interested in testing experiments know
about the new program without being overbearing.  Worst case scenario, they
close the tab and have one less add-on loading every time Firefox is started.</p>

<p>In our planning meeting it was suggested that getting three percent of users
from the old program to the new would be a reasonable compromise between
realistic and optimistic.  I guffawed, suggested that the audience had <em>already
opted-in once</em>, and put 6% in as our goal and figured it would be way higher.
Spoiler alert: I was wrong.</p>

<p>I’ll spare you the pain of writing the add-on (most of the trouble was that the
legacy add-on was so old you had to restart Firefox to uninstall it which really
broke up the flow).  On August 24th, we <a href="http://micropipes.com/blog/2016/08/24/time-to-upgrade-from-test-pilot-to-test-pilot/">pushed the update to the old program</a>.</p>

<p><img src="/assets/img/2016-testpilot-adu.png" title="Graph of daily usage" /></p>

<p>In the daily usage graph, you can see we successfully uninstalled ourselves from
several hundred thousand profiles, but we still have a long tail that doesn’t
seem to be uninstalling.  Fortunately, AMO has really great statistics
dashboards (<a href="https://addons.mozilla.org/en-US/firefox/addon/test-pilot/statistics/">these stats are public, by the way</a>) and we can dig a little
deeper.  So, as of today there are around 150k profiles with the old add-on
still installed.  About half of those are reporting running the latest version
(the one that uninstalls itself) and about half are disabled by the user.  I
suspect those halves overlap and account for 75k of the installed profiles.</p>

<p>The second 75k profiles are on older add-on versions and are not upgrading to a
new version.  There could be many reasons when we’re dealing with profiles this
old: they could be broken, they might not have write permissions to their
profile, their network traffic could be being blocked, an internet security
suite could be misbehaving, etc.  I don’t think there is much more we can do
for these folks right now, unfortunately.</p>

<p>Let’s talk about the overall goal though - how many people joined the new
program as a result of the new tab?</p>

<p><img src="/assets/img/2016-testpilot-conversions.png" title="Graph of conversions" /></p>

<p>As of the end of Q3, we had just over 26k conversions making for a <em>3.6%
conversion rate</em>.  Quite close to what was suggested in the original meeting by
the people who do this stuff for a living, and quite short of my brash guess.</p>

<p>Overall we got a 0.6 score on the <a href="https://wiki.mozilla.org/Test_Pilot/2016Q3">quarterly OKR</a>.</p>

<hr />

<p>Since I’m writing this post a few weeks after the end of Q3, I can see that
we’re continuing to get about 80 new users per day from the add-on prompt.
Overall that makes for about 28.5k total conversions as of Oct 27th.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><summary type="html"><![CDATA[One of my Q3 goals was to migrate the Legacy Test Pilot users into our new Test Pilot program (some background on the two programs). The previous program was similar in that people could give feedback on experiments, but different enough that we didn’t feel comfortable simply moving the users to the new program without some kind of notification and opting-in.]]></summary></entry><entry><title type="html">Test Pilot 2016 Q4 OKRs</title><link href="https://micropipes.com/2016/10/14/test-pilot-2016-q4-okrs/" rel="alternate" type="text/html" title="Test Pilot 2016 Q4 OKRs" /><published>2016-10-14T00:00:00-07:00</published><updated>2016-10-14T00:00:00-07:00</updated><id>https://micropipes.com/2016/10/14/test-pilot-2016-q4-okrs</id><content type="html" xml:base="https://micropipes.com/2016/10/14/test-pilot-2016-q4-okrs/"><![CDATA[<p>The Test Pilot <a href="https://wiki.mozilla.org/Test_Pilot/2016Q4">2016 Q4 OKRs are published</a>.  Primarily we’ll be focused on
continued growth of users (our overall 2016 goal).  We deprioritized
localization last quarter and over-rotated on publishing experiments by
launching four when we were only aiming for one.  This quarter we’ll turn that
knob back down (we’re aiming for two new experiments) and get localization done.</p>

<p>We also failed to graduate any experiments last quarter – arguably the most
important part of our entire process since it includes drawing conclusions and
publishing our results.  This quarter we’ll graduate three experiments from Test
Pilot, publish our findings so we can improve Firefox, and clear out space in
Test Pilot for the next big ideas.</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><summary type="html"><![CDATA[The Test Pilot 2016 Q4 OKRs are published. Primarily we’ll be focused on continued growth of users (our overall 2016 goal). We deprioritized localization last quarter and over-rotated on publishing experiments by launching four when we were only aiming for one. This quarter we’ll turn that knob back down (we’re aiming for two new experiments) and get localization done.]]></summary></entry><entry><title type="html">testpilot.firefox.com just got a lot easier to work on</title><link href="https://micropipes.com/2016/10/11/test-pilot-just-got-easier-to-work-on/" rel="alternate" type="text/html" title="testpilot.firefox.com just got a lot easier to work on" /><published>2016-10-11T00:00:00-07:00</published><updated>2016-10-11T00:00:00-07:00</updated><id>https://micropipes.com/2016/10/11/test-pilot-just-got-easier-to-work-on</id><content type="html" xml:base="https://micropipes.com/2016/10/11/test-pilot-just-got-easier-to-work-on/"><![CDATA[<p>We originally built Test Pilot on top of Django and some JS libraries to fulfill
our product requirements as well as keep us flexible enough to evolve quickly
since we were a brand new site.</p>

<p>As the site has grown, we’ve dropped a few requirements, and realized that we
were using <a href="http://basket.readthedocs.io/">APIs from our engagement team</a> to collect newsletter sign ups,
<a href="https://wiki.mozilla.org/Telemetry">APIs from our measurement team</a> for our metrics, and everything else on the
site was essentially HTML and JS.  We used the Django scaffolding for updating
the experiments, but there was no reason we needed to.</p>

<p><em>I’m happy to highlight that as of today <a href="https://testpilot.firefox.com">testpilot.firefox.com</a> is served
100% statically.</em>  Moving to flat files means:</p>

<ul>
  <li>
    <p>Easier to deploy.  All we do is copy files to an S3 bucket.  No more SQL
migrations or strange half-pushed states.</p>
  </li>
  <li>
    <p>More secure.  With just flat files we have way less surface area to attack.</p>
  </li>
  <li>
    <p>Easier to participate in.  You’ll no longer need to set up Docker or a
database.  Just check out the files, run <code class="language-plaintext highlighter-rouge">npm install</code> and you’re done.
(disclaimer: we just pushed this today, so we actually still need to update
<a href="https://github.com/mozilla/testpilot/blob/master/README.md">the documentation</a>)</p>
  </li>
  <li>
    <p>Excellent change control.  Instead of using an admin panel on the site, we now
use GitHub to manage our <a href="https://github.com/mozilla/testpilot/tree/master/content-src/experiments">static content</a>.  This means all changes are
tracked for free, we already have a process in place for reviewing pull
requests, and it’s easy to roll back or manipulate the data because it’s all
in the repository already.</p>
  </li>
</ul>

<p>If you want to get involved with Test Pilot, come join us in <a href="irc://irc.mozilla.org/testpilot">#testpilot</a> (or
<a href="http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=#testpilot">webchat</a>)!</p>]]></content><author><name>Wil Clouser</name></author><category term="Mozilla" /><summary type="html"><![CDATA[We originally built Test Pilot on top of Django and some JS libraries to fulfill our product requirements as well as keep us flexible enough to evolve quickly since we were a brand new site.]]></summary></entry></feed>